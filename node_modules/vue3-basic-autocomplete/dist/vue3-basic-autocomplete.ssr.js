'use strict';var vue=require('vue');function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}var script = {
  props: {
    modelValue: {
      default: ""
    },
    options: {
      type: Array,
      required: true
    },
    trackby: {
      type: String,
      default: ""
    },
    minlength: {
      type: Number,
      default: 1
    },
    "none-find": {
      type: String,
      default: "No matching results"
    },
    "input-class": {
      type: String,
      default: ""
    },
    placeholder: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    "list-max-height": {
      type: String,
      default: "300"
    },
    "clear-btn": {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue", "selected"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var inputAutocomplete = vue.ref(null);
    var data = vue.reactive({
      highlight: -1,
      filteredItems: false
    });

    var updateData = function updateData() {
      var input = inputAutocomplete.value.value;
      emit("update:modelValue", input);

      if (input.length == 0 && props.minlength == 0) {
        data.filteredItems = props.options;
        return;
      }

      if (input.length >= props.minlength) {
        var result;
        props.trackby != "" ? result = props.options.filter(function (i) {
          return i[props.trackby] == input;
        }) : result = props.options.filter(function (i) {
          return i == input;
        });
        result.length == 0 ? filterItems() : sendValue(result[0]);
      } else {
        data.filteredItems = false;
      }
    };

    var filterItems = function filterItems() {
      var result;
      var reg = new RegExp(inputAutocomplete.value.value.split("").join("\\w*").replace(/\W/, ""), "i");
      props.trackby != "" ? result = props.options.filter(function (i) {
        if (i[props.trackby].match(reg)) return i;
      }) : result = props.options.filter(function (i) {
        if (i.match(reg)) return i;
      });
      data.filteredItems = result;
    };

    var onBlur = function onBlur() {
      var result;
      props.trackby != "" ? result = props.options.filter(function (i) {
        return i[props.trackby] == inputAutocomplete.value.value;
      }) : result = props.options.filter(function (i) {
        return i == inputAutocomplete.value.value;
      });

      if (result.length === 0) {
        inputAutocomplete.value.value = "";
        data.filteredItems = false;
        emit("update:modelValue", "");
      }
    };

    var sendValue = function sendValue(sendData) {
      data.highlight = -1;
      data.filteredItems = false;
      emit("update:modelValue", sendData);
      emit("selected", data);
    };

    var clear = function clear() {
      inputAutocomplete.value.value = "";
      data.filteredItems = false;
      emit("update:modelValue", "");
    };

    var dropSelection = function dropSelection(e) {
      if (e.keyCode == 38) previous();
      if (e.keyCode == 40) next();
      if (e.keyCode == 13) enterClick();
    };

    var enterClick = function enterClick() {
      if (data.filteredItems != false && data.filteredItems.length > 0) sendValue(data.filteredItems[data.highlight]);
    };

    var previous = function previous() {
      if (data.filteredItems != false && data.highlight > 0) --data.highlight;
    };

    var next = function next() {
      var s = data.highlight,
          l = parseInt(data.filteredItems.length);
      if (data.filteredItems != false && s < l) data.highlight++;
    };

    return _objectSpread2(_objectSpread2({
      inputAutocomplete: inputAutocomplete
    }, vue.toRefs(data)), {}, {
      updateData: updateData,
      filterItems: filterItems,
      onBlur: onBlur,
      sendValue: sendValue,
      clear: clear,
      dropSelection: dropSelection,
      enterClick: enterClick
    });
  }
};var _hoisted_1 = {
  class: "autocomplete"
};
var _hoisted_2 = ["value", "placeholder", "disabled"];
var _hoisted_3 = {
  key: 1,
  class: "autocomplete-list"
};
var _hoisted_4 = ["onMousedown", "onMouseenter"];
var _hoisted_5 = {
  key: 0
};
var _hoisted_6 = {
  key: 1
};
var _hoisted_7 = {
  key: 1
};
var _hoisted_8 = {
  class: "text-muted"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [vue.createElementVNode("input", {
    class: vue.normalizeClass(["autocomplete-input", _ctx.inputClass]),
    ref: "inputAutocomplete",
    value: typeof $props.modelValue == 'string' || !$props.modelValue ? $props.modelValue : $props.modelValue[$props.trackby],
    onInput: _cache[0] || (_cache[0] = function ($event) {
      return $setup.updateData();
    }),
    onPaste: _cache[1] || (_cache[1] = function ($event) {
      return $setup.updateData();
    }),
    onKeydown: _cache[2] || (_cache[2] = function ($event) {
      return $setup.dropSelection($event);
    }),
    onBlur: _cache[3] || (_cache[3] = function ($event) {
      return $setup.onBlur();
    }),
    placeholder: $props.placeholder,
    disabled: $props.disabled
  }, null, 42, _hoisted_2), _ctx.clearBtn ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: "close-mark",
    onClick: _cache[4] || (_cache[4] = function () {
      return $setup.clear && $setup.clear.apply($setup, arguments);
    })
  }, "âœ–")) : vue.createCommentVNode("", true), _ctx.filteredItems ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_3, [_ctx.filteredItems.length > 0 ? (vue.openBlock(), vue.createElementBlock("ul", {
    key: 0,
    style: vue.normalizeStyle("max-height: ".concat(_ctx.listMaxHeight, "px"))
  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.filteredItems, function (item, index) {
    return vue.openBlock(), vue.createElementBlock("li", {
      key: index,
      class: vue.normalizeClass(_ctx.highlight == index ? 'highlight-class' : ''),
      onMousedown: function onMousedown($event) {
        return $setup.sendValue(item);
      },
      onMouseenter: function onMouseenter($event) {
        return _ctx.highlight = index;
      },
      onMouseleave: _cache[5] || (_cache[5] = function ($event) {
        return _ctx.highlight = -1;
      })
    }, [$props.trackby != '' ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_5, vue.toDisplayString(item[$props.trackby]), 1)) : vue.createCommentVNode("", true), $props.trackby == '' ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_6, vue.toDisplayString(item), 1)) : vue.createCommentVNode("", true)], 42, _hoisted_4);
  }), 128))], 4)) : vue.createCommentVNode("", true), _ctx.filteredItems.length === 0 ? (vue.openBlock(), vue.createElementBlock("ul", _hoisted_7, [vue.createElementVNode("li", _hoisted_8, vue.toDisplayString(_ctx.noneFind), 1)])) : vue.createCommentVNode("", true)])) : vue.createCommentVNode("", true)]);
}function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}var css_248z = "\n.autocomplete {\r\n  position: relative;\n}\n.autocomplete-input {\r\n  overflow: hidden;\r\n  width: 100%;\r\n  position: relative;\r\n  box-sizing: border-box;\n}\n.close-mark {\r\n  color: #808080ad;\r\n  position: absolute;\r\n  right: 2px;\r\n  top: 8px;\r\n  padding: 0 8px;\r\n  font-style: normal;\r\n  user-select: none;\r\n  cursor: pointer;\n}\n.close-mark:hover {\r\n  color: #9e9c9cad;\n}\n.autocomplete-list {\r\n  z-index: 9999;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  border: 1px solid #ced4da;\r\n  border-top: none;\r\n  background-color: white;\n}\n.autocomplete-list ul {\r\n  overflow: auto;\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\n}\n.autocomplete-list ul li {\r\n  padding: 6px;\r\n  cursor: default;\r\n  font-size: 0.92rem;\r\n  display: list-item;\r\n  text-align: left;\n}\n.highlight-class {\r\n  background-color: #efefef;\r\n  font-weight: bold;\n}\n.text-muted {\r\n  color: #6c757d !important;\n}\r\n";
styleInject(css_248z);script.render = render;// Import vue component
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),

var component = /*#__PURE__*/(function () {
  // Get component instance
  var installable = script; // Attach install function executed by Vue.use()

  installable.install = function (app) {
    app.component('Vue3BasicAutocomplete', installable);
  };

  return installable;
})(); // It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;
var namedExports=/*#__PURE__*/Object.freeze({__proto__:null,'default':component});// only expose one global var, with named exports exposed as properties of
// that global var (eg. plugin.namedExport)

Object.entries(namedExports).forEach(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      exportName = _ref2[0],
      exported = _ref2[1];

  if (exportName !== 'default') component[exportName] = exported;
});module.exports=component;