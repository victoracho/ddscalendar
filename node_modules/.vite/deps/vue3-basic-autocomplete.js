import {
  Fragment,
  createBaseVNode,
  createCommentVNode,
  createElementBlock,
  normalizeClass,
  normalizeStyle,
  openBlock,
  reactive,
  ref,
  renderList,
  toDisplayString,
  toRefs
} from "./chunk-IA5WD4LW.js";
import "./chunk-4337NVKS.js";

// node_modules/vue3-basic-autocomplete/dist/vue3-basic-autocomplete.esm.js
var script = {
  props: {
    modelValue: {
      default: ""
    },
    options: {
      type: Array,
      required: true
    },
    trackby: {
      type: String,
      default: ""
    },
    minlength: {
      type: Number,
      default: 1
    },
    "none-find": {
      type: String,
      default: "No matching results"
    },
    "input-class": {
      type: String,
      default: ""
    },
    placeholder: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    "list-max-height": {
      type: String,
      default: "300"
    },
    "clear-btn": {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue", "selected"],
  setup(props, _ref) {
    let {
      emit
    } = _ref;
    const inputAutocomplete = ref(null);
    const data = reactive({
      highlight: -1,
      filteredItems: false
    });
    const updateData = () => {
      const input = inputAutocomplete.value.value;
      emit("update:modelValue", input);
      if (input.length == 0 && props.minlength == 0) {
        data.filteredItems = props.options;
        return;
      }
      if (input.length >= props.minlength) {
        let result;
        props.trackby != "" ? result = props.options.filter((i) => i[props.trackby] == input) : result = props.options.filter((i) => i == input);
        result.length == 0 ? filterItems() : sendValue(result[0]);
      } else {
        data.filteredItems = false;
      }
    };
    const filterItems = () => {
      let result;
      let reg = new RegExp(inputAutocomplete.value.value.split("").join("\\w*").replace(/\W/, ""), "i");
      props.trackby != "" ? result = props.options.filter((i) => {
        if (i[props.trackby].match(reg))
          return i;
      }) : result = props.options.filter((i) => {
        if (i.match(reg))
          return i;
      });
      data.filteredItems = result;
    };
    const onBlur = () => {
      let result;
      props.trackby != "" ? result = props.options.filter((i) => i[props.trackby] == inputAutocomplete.value.value) : result = props.options.filter((i) => i == inputAutocomplete.value.value);
      if (result.length === 0) {
        inputAutocomplete.value.value = "";
        data.filteredItems = false;
        emit("update:modelValue", "");
      }
    };
    const sendValue = (sendData) => {
      data.highlight = -1;
      data.filteredItems = false;
      emit("update:modelValue", sendData);
      emit("selected", data);
    };
    const clear = () => {
      inputAutocomplete.value.value = "";
      data.filteredItems = false;
      emit("update:modelValue", "");
    };
    const dropSelection = (e) => {
      if (e.keyCode == 38)
        previous();
      if (e.keyCode == 40)
        next();
      if (e.keyCode == 13)
        enterClick();
    };
    const enterClick = () => {
      if (data.filteredItems != false && data.filteredItems.length > 0)
        sendValue(data.filteredItems[data.highlight]);
    };
    const previous = () => {
      if (data.filteredItems != false && data.highlight > 0)
        --data.highlight;
    };
    const next = () => {
      let s = data.highlight, l = parseInt(data.filteredItems.length);
      if (data.filteredItems != false && s < l)
        data.highlight++;
    };
    return {
      inputAutocomplete,
      ...toRefs(data),
      updateData,
      filterItems,
      onBlur,
      sendValue,
      clear,
      dropSelection,
      enterClick
    };
  }
};
var _hoisted_1 = {
  class: "autocomplete"
};
var _hoisted_2 = ["value", "placeholder", "disabled"];
var _hoisted_3 = {
  key: 1,
  class: "autocomplete-list"
};
var _hoisted_4 = ["onMousedown", "onMouseenter"];
var _hoisted_5 = {
  key: 0
};
var _hoisted_6 = {
  key: 1
};
var _hoisted_7 = {
  key: 1
};
var _hoisted_8 = {
  class: "text-muted"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createBaseVNode("input", {
    class: normalizeClass(["autocomplete-input", _ctx.inputClass]),
    ref: "inputAutocomplete",
    value: typeof $props.modelValue == "string" || !$props.modelValue ? $props.modelValue : $props.modelValue[$props.trackby],
    onInput: _cache[0] || (_cache[0] = ($event) => $setup.updateData()),
    onPaste: _cache[1] || (_cache[1] = ($event) => $setup.updateData()),
    onKeydown: _cache[2] || (_cache[2] = ($event) => $setup.dropSelection($event)),
    onBlur: _cache[3] || (_cache[3] = ($event) => $setup.onBlur()),
    placeholder: $props.placeholder,
    disabled: $props.disabled
  }, null, 42, _hoisted_2), _ctx.clearBtn ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: "close-mark",
    onClick: _cache[4] || (_cache[4] = function() {
      return $setup.clear && $setup.clear(...arguments);
    })
  }, "âœ–")) : createCommentVNode("", true), _ctx.filteredItems ? (openBlock(), createElementBlock("div", _hoisted_3, [_ctx.filteredItems.length > 0 ? (openBlock(), createElementBlock("ul", {
    key: 0,
    style: normalizeStyle(`max-height: ${_ctx.listMaxHeight}px`)
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filteredItems, (item, index) => {
    return openBlock(), createElementBlock("li", {
      key: index,
      class: normalizeClass(_ctx.highlight == index ? "highlight-class" : ""),
      onMousedown: ($event) => $setup.sendValue(item),
      onMouseenter: ($event) => _ctx.highlight = index,
      onMouseleave: _cache[5] || (_cache[5] = ($event) => _ctx.highlight = -1)
    }, [$props.trackby != "" ? (openBlock(), createElementBlock("span", _hoisted_5, toDisplayString(item[$props.trackby]), 1)) : createCommentVNode("", true), $props.trackby == "" ? (openBlock(), createElementBlock("span", _hoisted_6, toDisplayString(item), 1)) : createCommentVNode("", true)], 42, _hoisted_4);
  }), 128))], 4)) : createCommentVNode("", true), _ctx.filteredItems.length === 0 ? (openBlock(), createElementBlock("ul", _hoisted_7, [createBaseVNode("li", _hoisted_8, toDisplayString(_ctx.noneFind), 1)])) : createCommentVNode("", true)])) : createCommentVNode("", true)]);
}
function styleInject(css, ref2) {
  if (ref2 === void 0)
    ref2 = {};
  var insertAt = ref2.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = "\n.autocomplete {\r\n  position: relative;\n}\n.autocomplete-input {\r\n  overflow: hidden;\r\n  width: 100%;\r\n  position: relative;\r\n  box-sizing: border-box;\n}\n.close-mark {\r\n  color: #808080ad;\r\n  position: absolute;\r\n  right: 2px;\r\n  top: 8px;\r\n  padding: 0 8px;\r\n  font-style: normal;\r\n  user-select: none;\r\n  cursor: pointer;\n}\n.close-mark:hover {\r\n  color: #9e9c9cad;\n}\n.autocomplete-list {\r\n  z-index: 9999;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  border: 1px solid #ced4da;\r\n  border-top: none;\r\n  background-color: white;\n}\n.autocomplete-list ul {\r\n  overflow: auto;\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\n}\n.autocomplete-list ul li {\r\n  padding: 6px;\r\n  cursor: default;\r\n  font-size: 0.92rem;\r\n  display: list-item;\r\n  text-align: left;\n}\n.highlight-class {\r\n  background-color: #efefef;\r\n  font-weight: bold;\n}\n.text-muted {\r\n  color: #6c757d !important;\n}\r\n";
styleInject(css_248z);
script.render = render;
var entry_esm = (() => {
  const installable = script;
  installable.install = (app) => {
    app.component("Vue3BasicAutocomplete", installable);
  };
  return installable;
})();
export {
  entry_esm as default
};
//# sourceMappingURL=vue3-basic-autocomplete.js.map
